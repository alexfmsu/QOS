# =================================================== DESCRIPTION =====================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== DESCRIPTION =====================================================


# =================================================== EXAMPLES ========================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== EXAMPLES ========================================================


# =================================================== TODO ============================================================
# ---------------------------------------------------------------------------------------------------------------------
# fields: pos, n_levels
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== TODO ============================================================


# =====================================================================================================================
# QOS
from QOS.ElectronShell import ElectronShell
# ---------------------------------------------------------------------------------------------------------------------
# utils
from utils.ParseJumps import *
# =====================================================================================================================


class Atom:
    __slots__ = [
        '__id',
        '__wa',
        '__g',
        '__n_levels',
        '__lvl',
        '__electron_shell',
        'jumps'
    ]

    __ID = 0

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- INIT -------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, wa, g, id=None, lvl=0, electron_shell=None):
        self.__wa = wa

        self.__g = parse_jumps(g)

        self.__n_levels = max([g['levels'][1] for g in self.__g.values()]) + 1

        self.__lvl = 0

        if electron_shell is not None:
            pass
            # self.electron_shell = ElectronShell(electron_shell)
        else:
            self.__electron_shell = ElectronShell(n_levels=self.__n_levels)

    #     Assert(set(self.wa.keys()) == set(self.g.keys()), 'set(self.wa.keys()) != set(self.g.keys())')

        # self.jumps = list(self.__g.keys())

        self.set_id()
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    def electron_shell(self):
        return self.__electron_shell

    def set_spin(self, lvl, direction):
        self.__electron_shell.set_spin(lvl, direction)

    def unset_spin(self, lvl, direction):
        self.__electron_shell.unset_spin(lvl, direction)

    def set_electron_id(self, id, new_id):
        self.__electron_shell.set_electron_id(id, new_id)

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- SETTERS ----------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def set_id(self):
        self.__id = Atom.__ID
        Atom.__ID += 1
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- GETTERS ----------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def id(self):
        return self.__id

    def wa(self, lvl=None):
        if lvl is None:
            return self.__wa

        if lvl in self.__wa:
            return self.__wa[lvl]

        lvl = str(lvl)

        if lvl in self.__wa:
            return self.__wa[lvl]

        Assert(False, 'lvl not in self.__wa')

    def g(self, type=None):
        if type is None:
            return self.__g

        Assert(type in self.__g, 'type not in self.__g')

        return self.__g[type]

    def lvl(self):
        return self.__lvl

    def n_levels(self):
        return self.__n_levels
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    def up(self, lvl):
        ok = False

        for v in self.__g.values():
            if v['levels'] == [self.__lvl, lvl]:
                ok = True
                break

        Assert(ok, "not ok")
        self.__lvl = lvl

    def down(self, lvl):
        ok = False

        for v in self.__g.values():
            if v['levels'] == [lvl, self.__lvl]:
                ok = True
                break

        Assert(ok, "not ok")

        self.__lvl = lvl

    def change_lvl(self, lvl):
        Assert(lvl >= 0 and lvl <= self.__n_levels, 'lvl < 0 or lvl > self.__n_levels')
        self.__lvl = lvl

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- INFO -------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def json_data(self, mode):
        json_data = {}

        if mode == '-v':
            json_data['id'] = self.id()

        json_data['n_levels'] = self.n_levels()

        json_data['wa'] = {}
        for k, v in self.wa().items():
            json_data['wa'][k] = to_Hz(v)

        json_data['g'] = {}
        for k, v in self.__g.items():
            json_data['g'][k] = to_Hz(v['value'])

        json_data['lvl'] = self.lvl()

        return json_data

    def info(self, title=None, mode=None):
        if title is None:
            title = 'Atom_' + str(self.__id)

        json_data = {title: self.json_data(mode)}

        json_formatted_str = json.dumps(json_data, indent=4)

        colorful_json = highlight(json_formatted_str, lexers.JsonLexer(), formatters.TerminalFormatter())

        print(colorful_json)
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
# =====================================================================================================================
# def remove(self, i):
#     self.__atoms.remove(i)
#     self.__n_atoms -= 1
# =====================================================================================================================
