# =================================================== DESCRIPTION =====================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== DESCRIPTION =====================================================


# =================================================== EXAMPLES ========================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== EXAMPLES ========================================================


# =====================================================================================================================
# scientific
import numpy as np
from scipy.sparse import identity, kron, eye, csc_matrix, bsr_matrix, lil_matrix
# =====================================================================================================================
# libs
from lib.Matrix import Matrix
# =====================================================================================================================


class Hamiltonian(Matrix):

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- INIT -------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, base_states, cavity_chain):
        self.__basis = base_states
        self.__base_states = base_states.states

        self.size = len(self.__base_states)
        self.cavity_chain = cavity_chain
        self.cavities = cavity_chain.cavities()

        H0 = self.H0(base_states)
        HI = self.HI(base_states)

        self.H = H0 + HI
        # exit(0)
        self.data = self.H.data

        self.capacity = cavity_chain.capacity
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    def base_states(self):
        return self.__base_states
    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- H0 ---------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    def H0(self, cavity_chain):
        H0 = lil_matrix((self.size, self.size))
        # self.H0_symb = lil_matrix((self.size, self.size), dtype=str)

        cavities = self.cavities

        for k, v in self.__base_states.items():
            id_from = k

            H0[k, k] = 0

            for cv_i, cv in enumerate(v.state()):
                photons = cv[0]
                atoms = cv[1]

                wc = cavities[cv_i].wc()

                for ph_type, ph_count in photons.items():
                    H0[k, k] += wc[ph_type]['value'] * ph_count

                for i, atom_lvl in enumerate(atoms):
                    if atom_lvl == 0:
                        continue

                    wa = cavities[0].atom(i).wa(atom_lvl)
                    H0[k, k] += wa * atom_lvl

        return Matrix(m=self.size, n=self.size, dtype=np.float, data=H0)
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- HI ---------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def HI(self, cavity_chain):
        HI = lil_matrix((self.size, self.size))
        # self.H0_symb = lil_matrix((self.size, self.size), dtype=str)

        base_states = self.__base_states

        # print(base_states.items())

        for key_from, v in base_states.items():
            # print(key_from, v.as_string())
            # v.print()
            for conn in v.jumps():
                # print('\t', conn)
                # print('\t2', end='')
                # conn['state'].print()
                other_id = conn['state'].id()

                key_to = self.__basis.key_by_id(other_id)

                amplitude = conn['amplitude']
            #     # print(v.as_braket(), key_from, key_to, amplitude)
            #     # print(key_from, ':', v.as_braket(), '\t->\t', key_to, ':',
            #     #       v.as_braket(), ', ampl:', amplitude['type'], ' ', np.round(amplitude['value'], 3), sep='')

                HI[key_from, key_to] = amplitude['value']

        return Matrix(m=self.size, n=self.size, dtype=np.float, data=HI)
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # ---------------------------------------------------- PRINT ------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
    def print(self, mode='dense'):
        data = self.H.data.todense()

        for i in self.__base_states.keys():
            for j in self.__base_states.keys():
                print(to_Hz(data[i, j]), end='\t')
            print()

    def print_states(self):
        n_digits = len(str(self.size))
        print_format = ''.join(['%', str(n_digits), 'd'])

        for k, v in self.states.items():
            print(print_format % k, ': ', v, sep='')
    # -----------------------------------------------------------------------------------------------------------------
    # -----------------------------------------------------------------------------------------------------------------
# =====================================================================================================================
# def subsets(x, indices):
#     y = []

#     for i in indices:
#         y += list(x[i[0]:i[1]])

#     return y
# =====================================================================================================================
