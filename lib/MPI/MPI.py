# =====================================================================================================================
# system
import os
from math import ceil
# =====================================================================================================================
# mpi4py
from mpi4py import MPI

MPI_COMM_WORLD = MPI.COMM_WORLD
# =====================================================================================================================
# PyQuantum.Tools
from PyQuantum.Tools.Pickle import *
from PyQuantum.Tools.Print import print
# =====================================================================================================================


# =====================================================================================================================
# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- MPI_Comm_rank ----------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def MPI_Comm_rank():
    return MPI_COMM_WORLD.Get_rank()
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- MPI_Comm_size ----------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def MPI_Comm_size():
    return MPI_COMM_WORLD.Get_size()
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- MPI_Abort --------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def MPI_Abort(err_msg, filename=None, to_print=True):
    if not hasattr(MPI_Abort, '_mpirank'):
        MPI_Abort._mpirank = mpirank = MPI_Comm_rank()
    # print('mpirank:', MPI_Abort._mpirank)

    MPI_Barrier()

    if mpirank == 0:
        if to_print:
            print(err_msg)

        if filename is not None:
            f = open(filename, 'w')
            f.write(err_msg)
            f.close()

    MPI_Barrier()

    MPI_COMM_WORLD.Abort()
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- MPI_Barrier ------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def MPI_Barrier():
    MPI_COMM_WORLD.barrier()
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- N_BATCHES --------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def n_batches(N):
    mpirank = MPI_Comm_rank()
    mpisize = MPI_Comm_size()

    n_batches = int(ceil(N / mpisize))

    n1 = mpirank * n_batches

    if mpirank == mpisize - 1:
        n2 = N
    else:
        n2 = n1 + n_batches
    # n_batches = N - mpirank * n_batches

    return n1, n2
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- GATHER_FILE ------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def gather_file(path, filename, range_):
    if not hasattr(gather_file, '_mpirank'):
        gather_file._mpirank = mpirank = MPI_Comm_rank()

    MPI_Barrier()

    if mpirank == 0:
        data = []

        for i in range_:
            data_i = pickle_load(path + '/' + filename + '_' + str(i) + '.pkl')

            data += data_i

        pickle_dump(data, path + '/' + filename + '.pkl')

    MPI_Barrier()
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------- NODE_PRINT -------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
def node_print(msg, rank, filename=None, to_print=True):
    if not hasattr(MPI_Abort, '_mpirank'):
        node_print._mpirank = mpirank = MPI_Comm_rank()

    MPI_Barrier()

    if mpirank == rank:
        if filename is not None:
            f = open(filename, 'w')
            f.write(msg)
            f.close()

        if to_print:
            print(msg)

    MPI_Barrier()
# ---------------------------------------------------------------------------------------------------------------------
# =====================================================================================================================
